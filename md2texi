#!/usr/bin/env node

let fs = require('fs')
let program = require('commander')
let util = require('util')

let ti = require('./lib/texinfo')
let im = require('./lib/infomenu')
let meta = require('./package.json')

let input_src = function() {
    return program.args.length === 0 ? ['/dev/stdin'] : program.args
}

let conf = {
    verbose: 0,
    title: null,
    author: null,
    info: null,
    generator: `${meta.name}/${meta.version} (${process.platform}; ${process.arch}) node/${process.versions.node}`,
    plugins: null
}

program
    .version(meta.version)
    .option('-v, --verbose', 'Be verbose', function() { conf.verbose++ })
    .option('-t, --title <string>', 'Document title')
    .option('-a, --author <string>', 'Document author')
    .option('--info-cat <string>', 'Info category')
    .option('-p, --plugins <string>', 'A list of plugins to use, separated by commas', function(val) {
	conf.pl = new ti.PluginsLoader(val)
    })
    .option('--info <string>', 'Info filename output (for multiple src only)')
    .parse(process.argv)

conf.title = program.title || 'No Title'
conf.author = program.author || 'Anonymous'
conf.infoCat = program.infoCat || 'Miscellaneous'
conf.info = program.info || 'multi'

let texi = []
let contents = []

// create a full table of contents (grab menus from all the input files)
for (let file of input_src()) {
    let markdown = fs.readFileSync(file).toString()
    let node_prefix = ti.node_prefix(file)
    let menu = im.menu(markdown, { node_prefix })
//    console.error(util.inspect(menu, {depth: null}))

    contents.push(menu)
}
// add an index entry
let index = new im.InfoNode('root', 0)
index.kid_add(new im.InfoNode('Index', 1))
contents.push(index)

// actually parse each input file
for (let file of input_src()) {
    if (conf.verbose) console.error(file)
    let markdown = fs.readFileSync(file).toString()
    let node_prefix = ti.node_prefix(file)
    let menu = im.menu(markdown, { node_prefix })

    texi.push(`@c === BEGIN ${file} ===`)
    // use the aforementioned table of contents
    texi.push(ti.markdown2texi(markdown, menu, { node_prefix,
						 menu: contents,
						 plugins: conf.pl }))
    texi.push(`@c === END ${file} ===`)
}

// multiple files
if (contents.length > 1) {
    let firstlevelmenu = []
    firstlevelmenu.push("\n@menu")
    for (let submenu of contents) {
	for (let item of submenu.kids) {
	    firstlevelmenu.push(`* ${item.name}: ${item.id}.`)
	}
    }
    firstlevelmenu.push("@end menu\n")
    texi.unshift(firstlevelmenu.join("\n"))
}

process.stdout.write(ti.render(texi.join("\n"), conf))
